<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.geekcap.vmturbo</groupId>
  <artifactId>hello-world-servlet-example</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>hello-world-servlet-example Maven Webapp</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- This configures the compiler to produce Java 8 class files. -->
    <!-- The minimum JDK version installed is 8 of course, but newer JDK releases should work too. -->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>${maven.compiler.source}</maven.compiler.target>

    <junit.jupiter.version>5.2.0</junit.jupiter.version>
    <junit.platform.version>1.2.0</junit.platform.version>
    <hamcrest.version>1.3</hamcrest.version>
    <mockito.version>2.21.0</mockito.version>
    <jacoco.plugin.version>0.8.1</jacoco.plugin.version>
  </properties>

  <dependencies>
    <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
    </dependency>
    <dependency>
    <!-- Testing dependencies. -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>helloworld</finalName>
    <plugins>

      <plugin>
        <!-- Configures the compiler. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <compilerArgs>
            <arg>-Xlint</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
            	<groupId>org.jolokia</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.13.4</version>
		<configuration>
   			<dockerHost>tcp://192.168.99.100:2376</dockerHost>
   			<certPath>/Users/shaines/.docker/machine/machines/default</certPath>
   			<useColor>true</useColor>
  		   <images>
    			<image>
      				<name>lygado/tomcat-with-my-app:0.1</name>
      				<alias>service</alias>
				<build>
					<from>tomcat</from>
					<!--
					<ports>
						<port>8080</port>
					</ports>
					<entryPoint>
					   <exec>
						<args>catalina.sh</args>
						<args>start</args>
					   </exec>
					</entryPoint>
					-->
					<assembly>	
					   <mode>dir</mode>
					   <basedir>/usr/local/tomcat/webapps</basedir>
					   <descriptor>assembly.xml</descriptor>
					</assembly>
				</build>
				<run>
					<ports>
					   <port>8080:8080</port>
					</ports>
				</run>
			</image>
		   </images>
		</configuration>
            </plugin>
      <plugin>
        <!-- Unit tests are run by surefire. -->
        <!-- Classes under src/test/java called *Test are included automatically. -->
        <!-- Unit tests are run during the test phase. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.0</version>
      </plugin>
      <plugin>
        <!-- Integration tests are run by failsafe. -->
        <!-- Classes under src/test/java called *IT are included automatically. -->
        <!-- Integration tests are run during the verify phase. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.22.0</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- Code coverage plugin. -->
        <!-- This sets up code coverage for the unit tests, the integration tests, -->
        <!-- and the combined coverage of both. -->
        <!-- After running a `mvn clean install`, open `target/site/jacoco-both/index.html` in a browser. -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.plugin.version}</version>
        <executions>
          <execution>
            <id>jacoco-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-prepare-agent-integration</id>
            <goals>
              <goal>prepare-agent-integration</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-report</id>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules />
            </configuration>
          </execution>
          <execution>
            <!-- Combine the code coverage statistics generated for the unit and the integration tests. -->
            <id>jacoco-merge</id>
            <goals>
              <goal>merge</goal>
            </goals>
            <phase>verify</phase>
            <configuration>
              <fileSets>
                <fileSet>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>*.exec</include>
                  </includes>
                </fileSet>
              </fileSets>
              <destFile>${project.build.directory}/jacoco-both.exec</destFile>
            </configuration>
          </execution>
          <execution>
            <id>jacoco-integration</id>
            <goals>
              <goal>report-integration</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-reportboth</id>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco-both.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-both</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>
